"""
Relay Controller Module
=======================

Module ƒëi·ªÅu khi·ªÉn relay qua giao th·ª©c Modbus RTU
S·ª≠ d·ª•ng c·ª≠ ch·ªâ tay ƒë·ªÉ ƒëi·ªÅu khi·ªÉn c√°c thi·∫øt b·ªã relay

‚ö° QUAN TR·ªåNG V·ªÄ BAUDRATE:
   - Relay module Modbus RTU ch·ªâ ho·∫°t ƒë·ªông ·ªü 9600 baud
   - CH340 USB-Serial converter c√≥ th·ªÉ accept nhi·ªÅu baudrate (9600, 115200, etc.)
   - Nh∆∞ng relay ch·ªâ "hi·ªÉu" ƒë∆∞·ª£c 9600 baud
   - N·∫øu d√πng baudrate kh√°c:
     ‚úÖ K·∫øt n·ªëi s·∫Ω th√†nh c√¥ng (CH340 accept)
     ‚ùå Relay s·∫Ω kh√¥ng ph·∫£n h·ªìi (kh√¥ng hi·ªÉu l·ªánh)
   
üîß C√ÅCH HO·∫†T ƒê·ªòNG:
   1. Computer ‚Üí CH340 (USB to Serial) ‚Üí Relay Module
   2. CH340 chuy·ªÉn ƒë·ªïi USB th√†nh RS485/RS232
   3. Relay module nh·∫≠n t√≠n hi·ªáu serial v√† th·ª±c hi·ªán l·ªánh
   4. Ch·ªâ 9600 baud l√† chu·∫©n Modbus RTU cho relay
"""

import os
import cv2
import time
import yaml
import torch
import numpy as np
import sys
import datetime
import platform
import serial
import subprocess
from serial.tools import list_ports
from pathlib import Path

# Th√™m th∆∞ m·ª•c g·ªëc v√†o path ƒë·ªÉ import t·ª´ c√°c Step kh√°c
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

try:
    import mediapipe as mp
    from torch import nn
except ImportError as e:
    print(f"Error importing required modules: {e}")
    print("Please install required packages: pip install -r ../requirements.txt")
    sys.exit(1)


# ‚ö° M√É L·ªÜNH MODBUS RTU CHO RELAY (Ch·ªâ ho·∫°t ƒë·ªông ·ªü 9600 baud)
# C·∫•u tr√∫c: [Slave_ID, Function_Code, Address_Hi, Address_Lo, Value_Hi, Value_Lo, CRC_Lo, CRC_Hi]
# Function 05 (0x05): Write Single Coil - ghi tr·∫°ng th√°i cho 1 relay
# Value: 0xFF00 = ON, 0x0000 = OFF

RELAY1_ON =  [1, 5, 0, 0, 0xFF, 0, 0x8C, 0x3A]  # Relay 1 b·∫≠t
RELAY1_OFF = [1, 5, 0, 0, 0,    0, 0xCD, 0xCA]  # Relay 1 t·∫Øt

RELAY2_ON =  [1, 5, 0, 1, 0xFF, 0, 0xDD, 0xFA]  # Relay 2 b·∫≠t  
RELAY2_OFF = [1, 5, 0, 1, 0,    0, 0x9C, 0x0A]  # Relay 2 t·∫Øt

RELAY3_ON =  [1, 5, 0, 2, 0xFF, 0, 0x2D, 0xFA]  # Relay 3 b·∫≠t
RELAY3_OFF = [1, 5, 0, 2, 0,    0, 0x6C, 0x0A]  # Relay 3 t·∫Øt


class ModbusMaster:
    """
    Class qu·∫£n l√Ω k·∫øt n·ªëi v√† ƒëi·ªÅu khi·ªÉn c√°c thi·∫øt b·ªã qua giao ti·∫øp Modbus.
    H·ªó tr·ª£ ƒëi·ªÅu khi·ªÉn 3 relay/actuator.
    T·ª± ƒë·ªông t√¨m c·∫•u h√¨nh COM port v√† baudrate ph√π h·ª£p.
    """
    
    def __init__(self, custom_port=None, auto_detect=True) -> None:
        """
        Kh·ªüi t·∫°o k·∫øt n·ªëi serial v·ªõi thi·∫øt b·ªã Modbus.
        T·ª± ƒë·ªông th·ª≠ c√°c c·∫•u h√¨nh kh√°c nhau ƒë·ªÉ t√¨m config t·ªët nh·∫•t.
        
        Args:
            custom_port (str, optional): C·ªïng COM t√πy ch·ªçn. N·∫øu kh√¥ng cung c·∫•p, t·ª± ƒë·ªông t√¨m.
            auto_detect (bool): C√≥ t·ª± ƒë·ªông th·ª≠ c√°c c·∫•u h√¨nh kh√°c nhau hay kh√¥ng.
        """
        # C√°c baudrate ph·ªï bi·∫øn cho Modbus RTU (∆∞u ti√™n 9600)
        self.baudrates_to_try = [9600, 19200, 38400, 115200]
        
        # C·∫•u h√¨nh serial hi·ªán t·∫°i
        self.current_port = None
        self.current_baudrate = None
        self.ser = None
        
        # L·∫•y danh s√°ch c·ªïng
        port_list = list_ports.comports()
        print(f"üì° Available COM ports: {[str(port) for port in port_list]}")
        
        if len(port_list) == 0:
            raise Exception("No port found! Check connection to Modbus device.")

        # X√°c ƒë·ªãnh danh s√°ch c·ªïng ƒë·ªÉ th·ª≠
        ports_to_try = []
        
        if custom_port:
            ports_to_try = [custom_port]
            print(f"üéØ Using specified port: {custom_port}")
        else:
            # X√°c ƒë·ªãnh c·ªïng COM d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
            which_os = platform.system()
            
            if which_os == "Linux":
                usb_ports = [f"/dev/{port.name}" for port in port_list if "USB" in port.name]
                if not usb_ports:
                    raise Exception("No USB port found on Linux!")
                ports_to_try = usb_ports
                
            elif which_os == "Windows":
                # ∆Øu ti√™n COM5, sau ƒë√≥ USB Serial, cu·ªëi c√πng l√† t·∫•t c·∫£ COM ports
                preferred_ports = []
                usb_serial_ports = []
                other_com_ports = []
                
                for port in port_list:
                    strPort = str(port)
                    port_name = strPort.split(" ")[0]
                    
                    if "COM5" in strPort:
                        preferred_ports.insert(0, port_name)  # COM5 l√™n ƒë·∫ßu
                    elif "USB Serial" in strPort or "CH340" in strPort or "CP210" in strPort:
                        usb_serial_ports.append(port_name)
                    elif "COM" in strPort:
                        other_com_ports.append(port_name)
                
                # S·∫Øp x·∫øp th·ª© t·ª± ∆∞u ti√™n: COM5 > USB Serial > COM ports kh√°c
                ports_to_try = preferred_ports + usb_serial_ports + other_com_ports
                
            else:
                raise Exception(f"Unsupported OS: {which_os}")

        if not ports_to_try:
            raise Exception("No suitable ports found!")

        # üîß T·ª∞ ƒê·ªòNG TH·ª¨ C√ÅC C·∫§U H√åNH
        if auto_detect:
            print("\n" + "="*70)
            print("üîç AUTO-DETECTING BEST CONFIGURATION")
            print("   Testing COM ports with different baudrates...")
            print("   Priority: 9600 baud (relay standard) > others")
            print("="*70)
            
            best_config = self._auto_detect_config(ports_to_try)
            
            if best_config:
                self.current_port, self.current_baudrate = best_config
                print(f"\n‚úÖ BEST CONFIG FOUND:")
                print(f"   Port: {self.current_port}")
                print(f"   Baudrate: {self.current_baudrate} baud")
                
                # K·∫øt n·ªëi v·ªõi config t·ªët nh·∫•t
                self._connect_with_config(self.current_port, self.current_baudrate)
            else:
                raise Exception("‚ùå Could not find working configuration on any port!")
        else:
            # S·ª≠ d·ª•ng c·∫•u h√¨nh m·∫∑c ƒë·ªãnh (ch·ªâ 9600 baud)
            self.current_port = ports_to_try[0]
            self.current_baudrate = 9600
            print(f"\nüîß Using default config: {self.current_port} at 9600 baud")
            self._connect_with_config(self.current_port, self.current_baudrate)

    def _auto_detect_config(self, ports_to_try):
        """
        T·ª± ƒë·ªông th·ª≠ c√°c c·∫•u h√¨nh COM port v√† baudrate ƒë·ªÉ t√¨m config t·ªët nh·∫•t
        
        Returns:
            tuple: (port, baudrate) n·∫øu t√¨m th·∫•y, None n·∫øu kh√¥ng
        """
        working_configs = []
        
        for port in ports_to_try:
            print(f"\nüîå Testing port: {port}")
            
            for baudrate in self.baudrates_to_try:
                print(f"   üì° Trying {baudrate} baud...", end=" ")
                
                try:
                    # Th·ª≠ k·∫øt n·ªëi
                    test_ser = serial.Serial(
                        port=port,
                        baudrate=baudrate,
                        timeout=1.0,  # Timeout ng·∫Øn cho test
                        parity=serial.PARITY_NONE,
                        stopbits=serial.STOPBITS_ONE,
                        bytesize=serial.EIGHTBITS,
                        rtscts=False,
                        dsrdtr=False,
                        xonxoff=False
                    )
                    
                    # Clear buffers
                    test_ser.reset_input_buffer()
                    test_ser.reset_output_buffer()
                    time.sleep(0.1)
                    
                    # Test g·ª≠i l·ªánh ƒë∆°n gi·∫£n
                    test_result = self._test_relay_response(test_ser, port, baudrate)
                    
                    test_ser.close()
                    
                    if test_result:
                        score = self._calculate_config_score(port, baudrate, test_result)
                        working_configs.append((port, baudrate, score, test_result))
                        
                        # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
                        if isinstance(test_result, dict):
                            read_ok = "‚úÖ" if test_result.get('read_test') else "‚ùå"
                            relay_ok = "‚úÖ" if test_result.get('relay_test') else "‚ùå"
                            bytes_count = test_result.get('response_bytes', 0)
                            print(f"‚úÖ WORKS (score: {score}) [Read:{read_ok} Relay:{relay_ok} Bytes:{bytes_count}]")
                        else:
                            print(f"‚úÖ WORKS (score: {score})")
                    else:
                        print("‚ùå No response")
                        
                except Exception as e:
                    print(f"‚ùå Failed: {str(e)[:30]}...")
                    continue
        
        if not working_configs:
            return None
        
        # S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë (cao nh·∫•t tr∆∞·ªõc)
        working_configs.sort(key=lambda x: x[2], reverse=True)
        
        # Hi·ªÉn th·ªã chi ti·∫øt v√† tr·∫£ v·ªÅ config t·ªët nh·∫•t
        return self._display_config_selection(working_configs)
        working_configs.sort(key=lambda x: x[2], reverse=True)
        
        self._display_config_selection(working_configs)
        
        # Tr·∫£ v·ªÅ config t·ªët nh·∫•t
        return working_configs[0][0], working_configs[0][1]

    def _display_config_selection(self, working_configs):
        """Hi·ªÉn th·ªã chi ti·∫øt c√°c config v√† l√Ω do ch·ªçn config t·ªët nh·∫•t"""
        print(f"\nüèÜ WORKING CONFIGURATIONS FOUND:")
        for i, (port, baudrate, score, test_info) in enumerate(working_configs[:5]):  # Top 5
            status = "‚≠ê BEST" if i == 0 else f"#{i+1}"
            
            if isinstance(test_info, dict):
                read_status = "Read:‚úÖ" if test_info.get('read_test') else "Read:‚ùå"
                relay_status = "Relay:‚úÖ" if test_info.get('relay_test') else "Relay:‚ùå"
                bytes_info = f"Bytes:{test_info.get('response_bytes', 0)}"
                quality = f"Quality:{test_info.get('quality_score', 0)}"
                detail = f"[{read_status} {relay_status} {bytes_info} {quality}]"
            else:
                detail = f"[{test_info}]"
            
            print(f"   {status}: {port} @ {baudrate} baud (score: {score}) {detail}")
        
        # Hi·ªÉn th·ªã l√Ω do ch·ªçn config t·ªët nh·∫•t
        best_port, best_baudrate, best_score, best_test = working_configs[0]
        print(f"\nüéØ SELECTED: {best_port} @ {best_baudrate} baud")
        
        if best_baudrate == 9600:
            print(f"   ‚úÖ Perfect! 9600 baud is the Modbus RTU standard for relays")
        else:
            print(f"   ‚ö†Ô∏è  Non-standard baudrate, but showed best response")
        
        if best_score >= 150:
            print(f"   üèÜ Excellent configuration (score: {best_score})")
        elif best_score >= 100:
            print(f"   üëç Good configuration (score: {best_score})")
        else:
            print(f"   ‚ö†Ô∏è  Acceptable configuration (score: {best_score})")
            
        return best_port, best_baudrate

    def _test_relay_response(self, ser, port, baudrate):
        """
        Test ph·∫£n h·ªìi c·ªßa relay v·ªõi nhi·ªÅu l·ªánh kh√°c nhau ƒë·ªÉ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng
        
        Returns:
            dict: Th√¥ng tin chi ti·∫øt v·ªÅ test result
        """
        test_results = {
            'read_test': False,
            'relay_test': False,
            'response_bytes': 0,
            'errors': 0,
            'quality_score': 0
        }
        
        try:
            # Test 1: G·ª≠i l·ªánh ƒë·ªçc tr·∫°ng th√°i (an to√†n, kh√¥ng thay ƒë·ªïi relay)
            read_command = [0x01, 0x01, 0x00, 0x00, 0x00, 0x03, 0x3D, 0xCB]
            ser.write(bytearray(read_command))
            time.sleep(0.1)  # Ch·ªù l√¢u h∆°n cho relay ph·∫£n h·ªìi
            
            if ser.in_waiting > 0:
                response = ser.read(ser.in_waiting)
                if len(response) > 0:
                    test_results['read_test'] = True
                    test_results['response_bytes'] += len(response)
                    test_results['quality_score'] += 20
            
            # Clear buffer tr∆∞·ªõc test ti·∫øp theo
            ser.reset_input_buffer()
            ser.reset_output_buffer()
            time.sleep(0.05)
            
            # Test 2: Test th·ª±c t·∫ø v·ªõi relay (b·∫≠t/t·∫Øt nhanh)
            ser.write(bytearray(RELAY1_ON))
            time.sleep(0.05)
            
            
            # Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ l·ªánh ON
            relay_response = False
            if ser.in_waiting > 0:
                response = ser.read(ser.in_waiting)
                if len(response) > 0:
                    test_results['relay_test'] = True
                    test_results['response_bytes'] += len(response)
                    test_results['quality_score'] += 30
                    relay_response = True
            
            # T·∫Øt relay ngay l·∫≠p t·ª©c (an to√†n)
            ser.reset_output_buffer()
            ser.write(bytearray(RELAY1_OFF))
            time.sleep(0.05)
            
            # Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ l·ªánh OFF
            if ser.in_waiting > 0:
                response = ser.read(ser.in_waiting)
                if len(response) > 0:
                    test_results['response_bytes'] += len(response)
                    test_results['quality_score'] += 20
            elif relay_response:
                # N·∫øu ON c√≥ ph·∫£n h·ªìi nh∆∞ng OFF kh√¥ng c√≥, v·∫´n t√≠nh ƒëi·ªÉm
                test_results['quality_score'] += 10
            
            # Bonus ƒëi·ªÉm d·ª±a v√†o s·ªë l∆∞·ª£ng byte ph·∫£n h·ªìi
            if test_results['response_bytes'] >= 8:
                test_results['quality_score'] += 15  # Ph·∫£n h·ªìi ƒë·∫ßy ƒë·ªß
            elif test_results['response_bytes'] > 0:
                test_results['quality_score'] += 5   # C√≥ ph·∫£n h·ªìi nh∆∞ng kh√¥ng ƒë·∫ßy ƒë·ªß
            
            return test_results
            
        except Exception as e:
            test_results['errors'] += 1
            return test_results

    def _calculate_config_score(self, port, baudrate, test_result):
        """
        T√≠nh ƒëi·ªÉm t·ªïng th·ªÉ cho c·∫•u h√¨nh d·ª±a tr√™n nhi·ªÅu y·∫øu t·ªë
        
        Score = Test quality + Port priority + Baudrate priority + Reliability
        """
        total_score = 0
        
        # 1. ƒêi·ªÉm t·ª´ test th·ª±c t·∫ø (0-85 ƒëi·ªÉm)
        if isinstance(test_result, dict):
            total_score += test_result.get('quality_score', 0)
            
            # Bonus cho test th√†nh c√¥ng
            if test_result.get('read_test', False):
                total_score += 10
            if test_result.get('relay_test', False):
                total_score += 15
            
            # Penalty cho l·ªói
            total_score -= test_result.get('errors', 0) * 10
        
        # 2. ƒêi·ªÉm ∆∞u ti√™n port (0-50 ƒëi·ªÉm)
        if "COM5" in str(port):
            total_score += 50      # COM5 th∆∞·ªùng l√† relay port ch√≠nh
        elif "USB" in str(port).upper() or "CH340" in str(port).upper() or "CP210" in str(port).upper():
            total_score += 35      # USB Serial converter ports
        elif "COM" in str(port).upper():
            total_score += 20      # C√°c COM port kh√°c
        else:
            total_score += 10      # Port t·ªïng qu√°t
        
        # 3. ƒêi·ªÉm ∆∞u ti√™n baudrate (0-60 ƒëi·ªÉm)
        baudrate_scores = {
            9600: 60,    # Chu·∫©n Modbus RTU - t·ª∑ l·ªá th√†nh c√¥ng cao nh·∫•t
            19200: 45,   # Ph·ªï bi·∫øn, nhi·ªÅu thi·∫øt b·ªã h·ªó tr·ª£
            38400: 30,   # √çt ph·ªï bi·∫øn h∆°n nh∆∞ng v·∫´n ·ªïn ƒë·ªãnh
            115200: 15   # Ch·ªß y·∫øu cho debug/PC communication
        }
        total_score += baudrate_scores.get(baudrate, 5)
        
        # 4. Bonus reliability cho 9600 baud (relay standard)
        if baudrate == 9600:
            total_score += 25  # Bonus ƒë·∫∑c bi·ªát cho chu·∫©n relay
        
        # ƒê·∫£m b·∫£o score kh√¥ng √¢m
        return max(0, total_score)

    def _connect_with_config(self, port, baudrate):
        """K·∫øt n·ªëi v·ªõi c·∫•u h√¨nh ƒë√£ x√°c ƒë·ªãnh"""
        print(f"\nüîå Connecting to {port} at {baudrate} baud...")
        
        # Gi·∫£i th√≠ch v·ªÅ baudrate ƒë∆∞·ª£c ch·ªçn
        if baudrate == 9600:
            print("   ‚úÖ Using 9600 baud - Standard for relay Modbus RTU")
        else:
            print(f"   ‚ö†Ô∏è  Using {baudrate} baud - Non-standard, may work for some devices")
        
        try:
            self.ser = serial.Serial(
                port=port,
                baudrate=baudrate,
                timeout=2,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                bytesize=serial.EIGHTBITS,
                rtscts=False,
                dsrdtr=False,
                xonxoff=False
            )
            
            # Clear buffers
            self.ser.reset_input_buffer()
            self.ser.reset_output_buffer()
            
            print(f"‚úÖ Connected successfully!")
            print(f"   Port: {self.ser.name}")
            print(f"   Baudrate: {self.ser.baudrate} baud")
            print(f"   Timeout: {self.ser.timeout}s")
            
            # Ch·ªù ·ªïn ƒë·ªãnh
            time.sleep(1.0)
            
        except Exception as e:
            error_msg = str(e)
            if "access is denied" in error_msg.lower():
                raise Exception(f"‚ùå COM Port Access Error:\n"
                              f"   Port {port} is being used by another program\n"
                              f"   Solutions:\n"
                              f"   1. Close other serial programs\n"
                              f"   2. Unplug and replug USB cable\n"
                              f"   3. Run as Administrator")
            else:
                raise Exception(f"‚ùå Connection failed: {error_msg}")
        
        if not self.ser.is_open:
            try:
                self.ser.open()
                print("‚úÖ Serial port opened successfully")
            except Exception as e:
                raise Exception(f"‚ùå Could not open port {port}: {e}")
        
        print(f"üîó Modbus Master ready on {port} at {baudrate} baud")
        
    def __enter__(self):
        """Context manager entry"""
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager exit"""
        print("Closing the serial connection")
        self.close()

    def test_connection(self):
        """Test k·∫øt n·ªëi Modbus v√† kh·∫£ nƒÉng ƒëi·ªÅu khi·ªÉn relay"""
        try:
            print("\nüîç Testing Modbus connection...")
            print("   This will test actual relay control (safe test)")
            
            # Clear buffers tr∆∞·ªõc khi test
            self.ser.reset_input_buffer()
            self.ser.reset_output_buffer()
            
            # Test 1: G·ª≠i l·ªánh ƒë·ªçc tr·∫°ng th√°i (an to√†n, kh√¥ng thay ƒë·ªïi relay)
            print("   Test 1: Reading relay status...")
            read_command = [0x01, 0x01, 0x00, 0x00, 0x00, 0x03, 0x3D, 0xCB]  # Read 3 coils
            
            self.ser.write(bytearray(read_command))
            time.sleep(0.1)
            
            # ƒê·ªçc ph·∫£n h·ªìi
            response = None
            if self.ser.in_waiting > 0:
                response = self.ser.read(self.ser.in_waiting)
                print(f"   ‚úÖ Device responded: {' '.join([hex(x) for x in response])}")
            else:
                print("   ‚ö†Ô∏è  No response to read command (normal for some relay modules)")
            
            # Test 2: Test th·∫≠t v·ªõi relay 1 (b·∫≠t r·ªìi t·∫Øt ngay)
            print("   Test 2: Quick relay test (ON/OFF)...")
            
            # B·∫≠t relay 1
            self.ser.reset_output_buffer()
            self.ser.write(bytearray(RELAY1_ON))
            time.sleep(0.05)
            print("   üì° Sent: Relay 1 ON command")
            
            # ƒê·ªçc ph·∫£n h·ªìi n·∫øu c√≥
            if self.ser.in_waiting > 0:
                response = self.ser.read(self.ser.in_waiting)
                print(f"   üì• Response: {' '.join([hex(x) for x in response])}")
            
            # Ch·ªù m·ªôt ch√∫t
            time.sleep(0.3)
            
            # T·∫Øt relay 1 ngay
            self.ser.reset_output_buffer()
            self.ser.write(bytearray(RELAY1_OFF))
            time.sleep(0.05)
            print("   üì° Sent: Relay 1 OFF command")
            
            # ƒê·ªçc ph·∫£n h·ªìi n·∫øu c√≥
            if self.ser.in_waiting > 0:
                response = self.ser.read(self.ser.in_waiting)
                print(f"   üì• Response: {' '.join([hex(x) for x in response])}")
            
            print("   ‚úÖ Relay test completed (relay should have flickered briefly)")
            print("   üîß If relay didn't respond, check:")
            print("      - Power supply to relay module")
            print("      - Wiring connections")
            print("      - Relay module address (should be ID=1)")
            
            return True
                
        except Exception as e:
            print(f"   ‚ùå Connection test failed: {e}")
            return False

    def send_command_with_retry(self, command, max_retries=2):
        """
        G·ª≠i l·ªánh Modbus v·ªõi retry logic
        Ch·ªâ retry 2 l·∫ßn v√¨ relay module ƒë∆°n gi·∫£n
        """
        for attempt in range(max_retries):
            try:
                # Clear output buffer ƒë·ªÉ ƒë·∫£m b·∫£o l·ªánh s·∫°ch
                self.ser.reset_output_buffer()
                
                # G·ª≠i l·ªánh
                self.ser.write(bytearray(command))
                
                # Ch·ªù relay x·ª≠ l√Ω (relay c·∫ßn th·ªùi gian ph·∫£n ·ª©ng)
                time.sleep(0.1)  # TƒÉng delay cho relay ·ªïn ƒë·ªãnh
                
                # Log l·ªánh ƒë√£ g·ª≠i ƒë·ªÉ debug
                cmd_hex = ' '.join([f"{x:02X}" for x in command])
                print(f"   üì° Sent Modbus: {cmd_hex}")
                
                # ƒê·ªçc ph·∫£n h·ªìi n·∫øu c√≥ (m·ªôt s·ªë relay kh√¥ng ph·∫£n h·ªìi)
                if self.ser.in_waiting > 0:
                    response = self.ser.read(self.ser.in_waiting)
                    resp_hex = ' '.join([f"{x:02X}" for x in response])
                    print(f"   üì• Response: {resp_hex}")
                else:
                    print(f"   ‚ÑπÔ∏è  No response (normal for simple relay modules)")
                
                return True
                
            except Exception as e:
                print(f"   ‚ùå Attempt {attempt + 1} failed: {e}")
                if attempt < max_retries - 1:
                    print(f"   üîÑ Retrying in 0.1s...")
                    time.sleep(0.1)
                else:
                    print(f"   ‚ùå Failed after {max_retries} attempts")
                    return False
        
        return False

    def switch_actuator_1(self, state):
        """ƒêi·ªÅu khi·ªÉn relay 1 - ch·ªâ ho·∫°t ƒë·ªông ·ªü 9600 baud"""
        command = RELAY1_ON if state else RELAY1_OFF
        action = "ON" if state else "OFF"
        
        print(f"üîå Relay 1 ‚Üí {action}")
        success = self.send_command_with_retry(command)
        
        if success:
            print(f"‚úÖ Relay 1: {action} - Command sent successfully")
        else:
            print(f"‚ùå Relay 1: Failed to send {action} command")
            
        return success

    def switch_actuator_2(self, state):
        """ƒêi·ªÅu khi·ªÉn relay 2 - ch·ªâ ho·∫°t ƒë·ªông ·ªü 9600 baud"""
        command = RELAY2_ON if state else RELAY2_OFF
        action = "ON" if state else "OFF"
        
        print(f"üîå Relay 2 ‚Üí {action}")
        success = self.send_command_with_retry(command)
        
        if success:
            print(f"‚úÖ Relay 2: {action} - Command sent successfully")
        else:
            print(f"‚ùå Relay 2: Failed to send {action} command")
            
        return success
    
    def switch_actuator_3(self, state):
        """ƒêi·ªÅu khi·ªÉn relay 3 - ch·ªâ ho·∫°t ƒë·ªông ·ªü 9600 baud"""
        command = RELAY3_ON if state else RELAY3_OFF
        action = "ON" if state else "OFF"
        
        print(f"üîå Relay 3 ‚Üí {action}")
        success = self.send_command_with_retry(command)
        
        if success:
            print(f"‚úÖ Relay 3: {action} - Command sent successfully")
        else:
            print(f"‚ùå Relay 3: Failed to send {action} command")
            
        return success
        
    def all_on(self):
        """B·∫≠t t·∫•t c·∫£ relay - th·ª±c hi·ªán tu·∫ßn t·ª± v·ªõi delay"""
        print("üîå ALL RELAYS ‚Üí ON")
        success_count = 0
        
        if self.switch_actuator_1(True):
            success_count += 1
        time.sleep(0.1)  # Delay gi·ªØa c√°c l·ªánh ƒë·ªÉ relay ·ªïn ƒë·ªãnh
        
        if self.switch_actuator_2(True):
            success_count += 1
        time.sleep(0.1)
        
        if self.switch_actuator_3(True):
            success_count += 1
            
        print(f"‚úÖ {success_count}/3 relays turned ON successfully")
        return success_count == 3
        
    def all_off(self):
        """T·∫Øt t·∫•t c·∫£ relay - th·ª±c hi·ªán tu·∫ßn t·ª± v·ªõi delay"""
        print("üîå ALL RELAYS ‚Üí OFF")
        success_count = 0
        
        if self.switch_actuator_1(False):
            success_count += 1
        time.sleep(0.1)  # Delay gi·ªØa c√°c l·ªánh ƒë·ªÉ relay ·ªïn ƒë·ªãnh
        
        if self.switch_actuator_2(False):
            success_count += 1
        time.sleep(0.1)
        
        if self.switch_actuator_3(False):
            success_count += 1
            
        print(f"‚úÖ {success_count}/3 relays turned OFF successfully")
        return success_count == 3

    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi serial"""
        if hasattr(self, 'ser') and self.ser.is_open:
            self.ser.close()


class HandLandmarksDetector:
    """Ph√°t hi·ªán v√† tr√≠ch xu·∫•t landmarks t·ª´ b√†n tay s·ª≠ d·ª•ng MediaPipe"""
    
    def __init__(self, max_hands=1, detection_confidence=0.5, tracking_confidence=0.5):
        self.mp_drawing = mp.solutions.drawing_utils
        self.mp_drawing_styles = mp.solutions.drawing_styles
        self.mp_hands = mp.solutions.hands
        self.detector = self.mp_hands.Hands(
            static_image_mode=False,
            max_num_hands=max_hands,
            min_detection_confidence=detection_confidence,
            min_tracking_confidence=tracking_confidence
        )

    def detect_hand(self, frame):
        """
        Ph√°t hi·ªán b√†n tay v√† tr√≠ch xu·∫•t landmarks
        """
        hands = []
        frame = cv2.flip(frame, 1)  # L·∫≠t ngang ƒë·ªÉ d·ªÖ t∆∞∆°ng t√°c
        annotated_image = frame.copy()
        
        # Convert sang RGB (MediaPipe c·∫ßn input RGB)
        results = self.detector.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # V·∫Ω landmarks
                self.mp_drawing.draw_landmarks(
                    annotated_image,
                    hand_landmarks,
                    self.mp_hands.HAND_CONNECTIONS,
                    self.mp_drawing_styles.get_default_hand_landmarks_style(),
                    self.mp_drawing_styles.get_default_hand_connections_style()
                )
                
                # Extract landmarks
                hand = []
                for landmark in hand_landmarks.landmark:
                    x, y, z = landmark.x, landmark.y, landmark.z
                    hand.extend([x, y, z])
                
                hands.append(hand)
                
        return hands, annotated_image
class HandGestureModel(nn.Module):
    """
    Neural Network cho hand gesture recognition
    """
    def __init__(self, input_size=63, num_classes=6):
        super(HandGestureModel, self).__init__()
        
        self.network = nn.Sequential(nn.Linear(input_size,256),
                                   nn.ReLU(),
                                   nn.Dropout(0.1),
                                   nn.Linear(256,128),
                                   nn.ReLU(),
                                   nn.Dropout(0.1),
                                   nn.Linear(128,64),
                                   nn.Linear(64,num_classes)
                                   )
        
    
    def forward(self, x):
        return self.network(x)
    
    def get_logits(self, x):
        with torch.no_grad():
            outputs = self.forward(x)
            return torch.argmax(outputs, dim=1)
        
    def predict(self, x, threshold=0.5):
        with torch.no_grad():
            outputs = self.forward(x)                  # shape: (batch_size, num_classes)
            probs = torch.softmax(outputs, dim=1)
            max_probs, preds = torch.max(probs, dim=1) # l·∫•y x√°c su·∫•t cao nh·∫•t v√† index t∆∞∆°ng ·ª©ng
            preds[max_probs < threshold] = -1          # g√°n -1 cho nh·ªØng m·∫´u kh√¥ng ƒë·ªß ƒë·ªô t·ª± tin
            return preds




def label_dict_from_config_file(config_path):
    """ƒê·ªçc c·∫•u h√¨nh c√°c l·ªõp c·ª≠ ch·ªâ t·ª´ file YAML"""
    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config_data = yaml.safe_load(f)
        
        if 'gestures' not in config_data:
            print(f"Error: 'gestures' section not found in {config_path}")
            return {}
            
        return config_data['gestures']
        
    except Exception as e:
        print(f"Error loading gesture config: {e}")
        return {}


class RelayGestureControl:
    """ƒêi·ªÅu khi·ªÉn relay b·∫±ng c·ª≠ ch·ªâ tay qua Modbus"""
    
    def __init__(self, model_path, config_path="../config.yaml", resolution=(1280, 720), port=None, simulation=False, save_video=False):
        self.resolution = resolution
        self.height = 720
        self.width = 1280
        self.port = port
        self.simulation = simulation
        self.save_video = save_video  # ‚úÖ Th√™m t√πy ch·ªçn save video
        
        # Video recording setup
        self.video_writer = None
        self.recording = False
        self.video_filename = None

        # Kh·ªüi t·∫°o c√°c components
        self.detector = HandLandmarksDetector()
        self.status_text = None
        self.signs = label_dict_from_config_file(config_path)
        
        # Load model
        print(f"Loading model from: {model_path}")
        
        try:
            # Load checkpoint ƒë·ªÉ ki·ªÉm tra c·∫•u tr√∫c tr∆∞·ªõc
            checkpoint = torch.load(model_path, map_location='cpu', weights_only=False)
            
            # L·∫•y th√¥ng tin model t·ª´ checkpoint
            model_info = {}
            model_dict = {}
            
            if isinstance(checkpoint, dict):
                if 'model_state_dict' in checkpoint:
                    model_dict = checkpoint['model_state_dict']
                    if 'num_classes' in checkpoint:
                        model_info['num_classes'] = checkpoint['num_classes']
                        print(f"Found num_classes in model: {checkpoint['num_classes']}")
                    if 'gesture_labels' in checkpoint:
                        model_info['gesture_labels'] = checkpoint['gesture_labels']
                        print(f"Found gesture labels in model: {checkpoint['gesture_labels']}")
                else:
                    model_dict = checkpoint
            else:
                model_dict = checkpoint
            
            # Ph√¢n t√≠ch c·∫•u tr√∫c m·∫°ng neural t·ª´ state_dict
            # S·ª≠ d·ª•ng c√°ch ti·∫øp c·∫≠n m·∫°nh m·∫Ω h∆°n v·ªõi ph√°t hi·ªán s·ªë l·ªõp ·∫©n
            hidden_sizes = []
            max_layer_index = -1
            
            # ƒê·∫øm s·ªë l·ªõp v√† k√≠ch th∆∞·ªõc t·ª´ng l·ªõp
            for key in model_dict.keys():
                if 'network' in key and 'weight' in key:
                    # L·∫•y s·ªë index c·ªßa l·ªõp t·ª´ key (e.g., 'network.6.weight' -> 6)
                    parts = key.split('.')
                    if len(parts) >= 2:
                        try:
                            layer_index = int(parts[1])
                            max_layer_index = max(max_layer_index, layer_index)
                        except ValueError:
                            pass
            
            # Ki·ªÉm tra xem ch√∫ng ta c√≥ m·ªôt m·∫°ng neural nhi·ªÅu l·ªõp
            if max_layer_index > 0:
                print(f"Detected {(max_layer_index + 1) // 3} hidden layers")
                
                # Tr√≠ch xu·∫•t k√≠ch th∆∞·ªõc c·ªßa c√°c l·ªõp ·∫©n
                for i in range(0, max_layer_index + 1, 3):  # M·ªói kh·ªëi g·ªìm Linear + ReLU + Dropout
                    if f'network.{i}.weight' in model_dict:
                        weight_shape = model_dict[f'network.{i}.weight'].shape
                        if len(weight_shape) == 2:
                            hidden_sizes.append(weight_shape[0])
                
                # L·ªõp cu·ªëi c√πng kh√¥ng n√™n ƒë∆∞·ª£c t√≠nh l√† hidden layer
                if hidden_sizes and len(hidden_sizes) > 1:
                    hidden_sizes = hidden_sizes[:-1]
            
            # N·∫øu kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c c·∫•u tr√∫c, d√πng c·∫•u tr√∫c m·∫∑c ƒë·ªãnh ƒë√£ bi·∫øt
            if not hidden_sizes or len(hidden_sizes) < 2:
                print("Using default architecture: [512, 256, 128, 64]")
                hidden_sizes = [512, 256, 128, 64]
                
            # S·ªë l·ªõp ƒë·∫ßu ra (∆∞u ti√™n d√πng s·ªë l·ªõp t·ª´ config file)
            num_classes = len(self.signs)
            model_classes = model_info.get('num_classes')
            
            if model_classes and model_classes != num_classes:
                print(f"WARNING: Model has {model_classes} classes but config has {num_classes} classes.")
                print("Using number of classes from config file.")
                
            print(f"Final model structure: hidden_sizes={hidden_sizes}, num_classes={num_classes}")
            
            # Kh·ªüi t·∫°o model v·ªõi c·∫•u tr√∫c ƒë√£ ph√°t hi·ªán
            self.classifier = HandGestureModel(
                input_size=63, 
                num_classes=num_classes
            )
            
            # T·∫£i state_dict v√†o model
            if 'model_state_dict' in checkpoint:
                print("Loading state_dict from 'model_state_dict' key")
                self.classifier.load_state_dict(checkpoint['model_state_dict'])
            else:
                print("Loading direct state dict")
                self.classifier.load_state_dict(checkpoint)
                
            print("Model loaded successfully")
            
        except Exception as e:
            print(f"Error loading model: {e}")
            import traceback
            traceback.print_exc()
            raise
            
        # Set model to evaluation mode
        self.classifier.eval()

        # Kh·ªüi t·∫°o Modbus controller v·ªõi fallback simulation
        self.controller = None
        
        if not simulation:
            try:
                self.controller = ModbusMaster(custom_port=self.port)
                
                # Test k·∫øt n·ªëi th·ª±c t·∫ø
                if self.controller.test_connection():
                    print("‚úÖ Hardware controller initialized and tested successfully")
                    print("üîå Ready to control relays via Modbus")
                else:
                    print("‚ö†Ô∏è  Hardware connected but test failed - will try anyway")
                    
            except Exception as e:
                print(f"‚ùå Hardware connection failed: {e}")
                print("üéÆ Automatically switching to SIMULATION mode...")
                print("üí° You can test gesture recognition without hardware")
                self.simulation = True
                self.controller = None
        
        if self.simulation:
            print("\n" + "="*50)
            print("üéÆ SIMULATION MODE ENABLED")
            print("üîå Virtual relay control active")
            print("üëã Gesture recognition fully functional")
            print("‚ö° All relay commands will be simulated")
            print("="*50 + "\n")
            
        # Tr·∫°ng th√°i ƒë√®n
        self.light1 = False
        self.light2 = False
        self.light3 = False
        
        # Tracking variables
        self.last_command_time = time.time()
        self.command_debounce = 1.0  # 1 second debounce time
        
        print(f"Relay Gesture Control initialized with {len(self.signs)} gestures")
        print(f"Available gestures: {list(self.signs.values())}")
        
        # Setup video recording if enabled
        if self.save_video:
            # T·∫°o th∆∞ m·ª•c videos n·∫øu ch∆∞a c√≥
            video_dir = Path("videos")
            video_dir.mkdir(exist_ok=True)
            
            # T·∫°o t√™n file v·ªõi timestamp
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            mode = "simulation" if self.simulation else "hardware"
            self.video_filename = video_dir / f"gesture_control_{mode}_{timestamp}.mp4"
            
            print(f"üìπ Video recording enabled: {self.video_filename}")
        else:
            print("üìπ Video recording disabled")
    
    def _setup_video_recording(self, frame_shape):
        """Kh·ªüi t·∫°o video writer"""
        if self.save_video and not self.recording:
            try:
                # Codec v√† setup
                fourcc = cv2.VideoWriter_fourcc(*'mp4v')
                fps = 20.0  # FPS cho video
                
                self.video_writer = cv2.VideoWriter(
                    str(self.video_filename),
                    fourcc,
                    fps,
                    (frame_shape[1], frame_shape[0])  # (width, height)
                )
                
                if self.video_writer.isOpened():
                    self.recording = True
                    print(f"‚úÖ Video recording started: {self.video_filename}")
                else:
                    print(f"‚ùå Failed to start video recording")
                    self.video_writer = None
                    
            except Exception as e:
                print(f"‚ùå Error setting up video recording: {e}")
                self.video_writer = None

    def _write_video_frame(self, frame):
        """Ghi frame v√†o video"""
        if self.recording and self.video_writer:
            try:
                self.video_writer.write(frame)
            except Exception as e:
                print(f"‚ùå Error writing video frame: {e}")

    def _stop_video_recording(self):
        """D·ª´ng v√† ƒë√≥ng video recording"""
        if self.recording and self.video_writer:
            try:
                self.video_writer.release()
                self.recording = False
                print(f"‚úÖ Video saved: {self.video_filename}")
            except Exception as e:
                print(f"‚ùå Error stopping video recording: {e}")
            finally:
                self.video_writer = None

    def _control_relay(self, relay_num, state):
        """ƒêi·ªÅu khi·ªÉn relay v·ªõi h·ªó tr·ª£ simulation"""
        if self.simulation:
            action = "ON" if state else "OFF"
            timestamp = datetime.datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"üîå [{timestamp}] SIMULATION: Relay {relay_num} -> {action}")
            
            # T·∫°o hi·ªáu ·ª©ng LED ·∫£o
            status = "üü¢" if state else "üî¥"
            print(f"   {status} Virtual Relay {relay_num} status: {action}")
            return
        
        try:
            if relay_num == 1:
                self.controller.switch_actuator_1(state)
            elif relay_num == 2:
                self.controller.switch_actuator_2(state)
            elif relay_num == 3:
                self.controller.switch_actuator_3(state)
        except Exception as e:
            print(f"‚ùå Error controlling relay {relay_num}: {e}")

    def _control_all_relays(self, state):
        """ƒêi·ªÅu khi·ªÉn t·∫•t c·∫£ relay v·ªõi simulation"""
        if self.simulation:
            action = "ON" if state else "OFF"
            timestamp = datetime.datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"üîå [{timestamp}] SIMULATION: ALL RELAYS -> {action}")
            
            # Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫•t c·∫£ relay ·∫£o
            status = "üü¢" if state else "üî¥"
            print(f"   {status} Virtual Relay 1: {action}")
            print(f"   {status} Virtual Relay 2: {action}")
            print(f"   {status} Virtual Relay 3: {action}")
            return
        
        try:
            if state:
                self.controller.all_on()
            else:
                self.controller.all_off()
        except Exception as e:
            print(f"‚ùå Error controlling all relays: {e}")

    def _log_action(self, gesture, action):
        """Ghi log h√†nh ƒë·ªông v·ªõi timestamp"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        mode = "SIM" if self.simulation else "HW"
        print(f"üëã [{timestamp}] [{mode}] Gesture: {gesture} ‚Üí {action}")

        # Ghi v√†o file log
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        log_file = log_dir / "relay_control.log"
        
        with open(log_file, 'a') as f:
            f.write(f"{timestamp} | {mode} | {gesture} | {action} | " 
                   f"Lights: [{int(self.light1)}, {int(self.light2)}, {int(self.light3)}]\n")

    def light_simulation(self, img):
        """Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë√®n tr√™n giao di·ªán"""
        # Append a white rectangle at the bottom of the image
        height, width, _ = img.shape
        rect_height = int(0.15 * height)
        rect_width = width
        white_rect = np.ones((rect_height, rect_width, 3), dtype=np.uint8) * 255

        # Draw a red border around the rectangle
        cv2.rectangle(white_rect, (0, 0), (rect_width, rect_height), (0, 0, 255), 2)

        # Calculate circle positions
        circle_radius = int(0.45 * rect_height)
        circle1_center = (int(rect_width * 0.25), int(rect_height / 2))
        circle2_center = (int(rect_width * 0.5), int(rect_height / 2))
        circle3_center = (int(rect_width * 0.75), int(rect_height / 2))

        # Draw the circles
        on_color = (0, 255, 255)  # Yellow
        off_color = (0, 0, 0)     # Black
        
        lights = [self.light1, self.light2, self.light3]
        centers = [circle1_center, circle2_center, circle3_center]
        labels = ["Light 1", "Light 2", "Light 3"]
        
        for i, (center, light, label) in enumerate(zip(centers, lights, labels)):
            color = on_color if light else off_color
            cv2.circle(white_rect, center, circle_radius, color, -1)
            
            # Add label
            text_y = center[1] + circle_radius + 15
            cv2.putText(white_rect, label, 
                      (center[0] - 30, text_y), 
                      cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1)

        # Append the white rectangle to the bottom of the image
        img = np.vstack((img, white_rect))
        return img

    def run(self):
        """Ch·∫°y h·ªá th·ªëng nh·∫≠n di·ªán v√† ƒëi·ªÅu khi·ªÉn"""
        cam = cv2.VideoCapture(0)
        cam.set(3, self.width)
        cam.set(4, self.height)
        
        if not cam.isOpened():
            print("Error: Could not open camera")
            return
            
        print("=== RELAY GESTURE CONTROL SYSTEM ===")
        print("Controls:")
        print("- 'q': Quit")
        print("- 'r': Reset all lights")
        print("- 'v': Toggle video recording (if enabled)")  # ‚úÖ Th√™m ph√≠m v
        print(f"- Gestures: {list(self.signs.values())}")
        print("=====================================")
        
        # Bi·∫øn ƒë·ªÉ track video recording state
        video_initialized = False
        fps = 0
        frame_count = 0
        start_time = time.time()
        
        try:
            while cam.isOpened():
                ret, frame = cam.read()
                if not ret:
                    print("Error: Could not read frame from camera")
                    break
                    
                # Detect hand landmarks
                hand, img = self.detector.detect_hand(frame)
                
                # Process detected hand
                if len(hand) > 0:
                    with torch.no_grad():
                        # Convert landmarks to tensor
                        hand_landmark = torch.from_numpy(
                            np.array(hand[0], dtype=np.float32).reshape(1, -1)
                        )
                        
                        # Predict gesture
                        class_number = self.classifier.predict(hand_landmark, threshold=0.7).item()
                        
                        # Process valid gesture
                        if class_number != -1:
                            self.status_text = self.signs[class_number]
                            
                            # Debounce check
                            current_time = time.time()
                            if current_time - self.last_command_time >= self.command_debounce:
                                self.last_command_time = current_time
                                
                                # Process gesture commands
                                if self.status_text == "light1_on":
                                    if not self.light1:
                                        self.light1 = True
                                        self._control_relay(1, True)
                                        self._log_action("light1_on", "Light 1 ON")
                                        
                                elif self.status_text == "light1_off":
                                    if self.light1:
                                        self.light1 = False
                                        self._control_relay(1, False)
                                        self._log_action("light1_off", "Light 1 OFF")
                                        
                                elif self.status_text == "light2_on":
                                    if not self.light2:
                                        self.light2 = True
                                        self._control_relay(2, True)
                                        self._log_action("light2_on", "Light 2 ON")
                                        
                                elif self.status_text == "light2_off":
                                    if self.light2:
                                        self.light2 = False
                                        self._control_relay(2, False)
                                        self._log_action("light2_off", "Light 2 OFF")
                                        
                                elif self.status_text == "turn_on":
                                    if not (self.light1 and self.light2 and self.light3):
                                        self.light1 = self.light2 = self.light3 = True
                                        self._control_all_relays(True)
                                        self._log_action("turn_on", "ALL ON")
                                        
                                elif self.status_text == "turn_off":
                                    if self.light1 or self.light2 or self.light3:
                                        self.light1 = self.light2 = self.light3 = False
                                        self._control_all_relays(False)
                                        self._log_action("turn_off", "ALL OFF")
                        else:
                            self.status_text = "undefined command"
                else:
                    self.status_text = None
                
                # Add UI elements
                img = self.light_simulation(img)
                
                # ‚úÖ Setup video recording on first frame
                if self.save_video and not video_initialized:
                    self._setup_video_recording(img.shape)
                    video_initialized = True
                
                # ‚úÖ Write frame to video if recording
                if self.recording:
                    self._write_video_frame(img)
                
                # Display gesture status
                if self.status_text:
                    cv2.putText(img, f"Gesture: {self.status_text}", 
                               (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 
                               0.8, (0, 255, 0), 2, cv2.LINE_AA)
                
                # Calculate and show FPS
                frame_count += 1
                elapsed_time = time.time() - start_time
                if elapsed_time > 1.0:
                    fps = frame_count / elapsed_time
                    frame_count = 0
                    start_time = time.time()
                
                cv2.putText(img, f"FPS: {fps:.1f}", 
                           (10, img.shape[0] - 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
                
                # Show mode indicator
                mode_text = "SIMULATION MODE" if self.simulation else "RELAY MODE"
                mode_color = (0, 255, 255) if self.simulation else (0, 0, 255)  # Yellow for sim, Red for hardware
                cv2.putText(img, mode_text, 
                           (img.shape[1] - 200, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.7, mode_color, 2)
                
                # ‚úÖ Show video recording status
                if self.save_video:
                    record_text = "REC ‚óè" if self.recording else "REC ‚óã"
                    record_color = (0, 0, 255) if self.recording else (128, 128, 128)  # Red when recording, Gray when not
                    cv2.putText(img, record_text, 
                               (img.shape[1] - 200, 60), 
                               cv2.FONT_HERSHEY_SIMPLEX, 0.6, record_color, 2)
                
                # Display the frame
                cv2.namedWindow("Relay Gesture Control", cv2.WINDOW_NORMAL)
                cv2.resizeWindow("Relay Gesture Control", self.resolution[0], self.resolution[1])
                cv2.imshow("Relay Gesture Control", img)
                
                # Process keys
                key = cv2.waitKey(1)
                if key == ord("q"):
                    break
                elif key == ord("r"):
                    # Reset all lights
                    self.light1 = self.light2 = self.light3 = False
                    self._control_all_relays(False)
                    print("All lights reset")
                elif key == ord("v") and self.save_video:
                    # ‚úÖ Toggle video recording
                    if self.recording:
                        self._stop_video_recording()
                    else:
                        if video_initialized:
                            # Restart recording v·ªõi frame hi·ªán t·∫°i
                            self._setup_video_recording(img.shape)
                        else:
                            print("‚ö†Ô∏è  Video not initialized yet, wait for first frame")
        
        except Exception as e:
            print(f"Error in main loop: {e}")
            import traceback
            traceback.print_exc()
            
        finally:
            # Cleanup
            if cam.isOpened():
                cam.release()
            cv2.destroyAllWindows()
            
            # ‚úÖ Stop video recording if active
            if self.recording:
                self._stop_video_recording()
            
            # Turn off all relays before exit
            try:
                self._control_all_relays(False)
                if self.controller:
                    self.controller.close()
                if self.simulation:
                    print("üéÆ Simulation ended - All virtual relays turned off")
                else:
                    print("All relays turned off")
            except:
                pass


def main():
    """Main function"""
    import argparse
    
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Relay Gesture Control System")
    parser.add_argument("--model", "-m", 
                      default="../Step_2/models/hand_gesture_model.pth",
                      help="Path to trained model file")
    parser.add_argument("--config", "-c", 
                      default="../config.yaml",
                      help="Path to configuration file")
    parser.add_argument("--resolution", "-r", 
                      default="1280x720",
                      help="Display resolution (WIDTHxHEIGHT)")
    parser.add_argument("--port", "-p",
                      help="Specify COM port manually (e.g., COM3, COM4)")
    parser.add_argument("--list-ports", "-l", action="store_true",
                      help="List all available COM ports and exit")
    parser.add_argument("--simulation", "-s", action="store_true",
                      help="Run in simulation mode without hardware")
    parser.add_argument("--save-video", action="store_true",
                      help="Enable video recording (save to videos/ folder)")
    parser.add_argument("--record", action="store_true", 
                      help="Alias for --save-video")
    
    args = parser.parse_args()
    
    # List all available ports if requested
    if args.list_ports:
        print("Available COM ports:")
        for port in list_ports.comports():
            print(f"  {port}")
        return
    
    # Parse resolution
    try:
        width, height = map(int, args.resolution.split('x'))
        resolution = (width, height)
    except:
        print(f"Invalid resolution format: {args.resolution}. Using default 1280x720")
        resolution = (1280, 720)
    
    # Create and run gesture control system
    try:
        # Enable video recording if requested
        save_video = getattr(args, 'save_video', False) or getattr(args, 'record', False)
        
        control_system = RelayGestureControl(
            model_path=args.model,
            config_path=args.config,
            resolution=resolution,
            port=args.port,
            simulation=getattr(args, 'simulation', False),
            save_video=save_video
        )
        control_system.run()
    except KeyboardInterrupt:
        print("\nExiting by user request")
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if not getattr(args, 'simulation', False):
            print("üéÆ Try running with --simulation flag to test gesture recognition")
            print("üí° Command: python relay_controller.py --simulation")
        import traceback
        traceback.print_exc()


# Test the Modbus controller directly
def test_modbus_controller(custom_port=None):
    """Test Modbus controller - ch·ªâ s·ª≠ d·ª•ng 9600 baud chu·∫©n"""
    print("="*60)
    print("üîß TESTING MODBUS CONTROLLER AT 9600 BAUD")
    print("="*60)
    
    try:
        controller = ModbusMaster(custom_port=custom_port)
        
        # Test k·∫øt n·ªëi tr∆∞·ªõc
        print("\nüîç Step 1: Testing connection...")
        if not controller.test_connection():
            print("‚ö†Ô∏è  Connection test had issues but continuing...")
        
        print("\nüîß Step 2: Testing individual relay control...")
        
        # Test t·ª´ng relay m·ªôt c√°ch an to√†n (1 l·∫ßn b·∫≠t/t·∫Øt)
        for relay_num in range(1, 4):
            print(f"\n   Testing Relay {relay_num}:")
            
            # B·∫≠t relay
            if relay_num == 1:
                success_on = controller.switch_actuator_1(True)
            elif relay_num == 2:
                success_on = controller.switch_actuator_2(True)
            else:
                success_on = controller.switch_actuator_3(True)
            
            if success_on:
                time.sleep(0.5)  # ƒê·ªÉ th·∫•y relay ho·∫°t ƒë·ªông
                
                # T·∫Øt relay
                if relay_num == 1:
                    success_off = controller.switch_actuator_1(False)
                elif relay_num == 2:
                    success_off = controller.switch_actuator_2(False)
                else:
                    success_off = controller.switch_actuator_3(False)
                
                if success_off:
                    print(f"   ‚úÖ Relay {relay_num}: Test completed successfully")
                else:
                    print(f"   ‚ö†Ô∏è  Relay {relay_num}: ON worked, but OFF failed")
            else:
                print(f"   ‚ùå Relay {relay_num}: Failed to turn ON")
            
            time.sleep(0.3)  # Delay gi·ªØa c√°c test
        
        print(f"\nüîß Step 3: Testing group control...")
        
        # Test b·∫≠t t·∫•t c·∫£
        print("   Testing ALL ON...")
        if controller.all_on():
            time.sleep(1)  # ƒê·ªÉ th·∫•y t·∫•t c·∫£ relay b·∫≠t
            
            # Test t·∫Øt t·∫•t c·∫£
            print("   Testing ALL OFF...")
            controller.all_off()
            time.sleep(0.5)
        
        print("\n" + "="*60)
        print("‚úÖ MODBUS TEST COMPLETED SUCCESSFULLY!")
        print("üîå All relay commands sent at 9600 baud")
        print("üí° If relays didn't respond physically, check:")
        print("   - Relay module power supply")
        print("   - Wiring connections")
        print("   - Module address settings")
        print("="*60)
        
        controller.close()
        
    except Exception as e:
        print(f"\n‚ùå Test failed: {e}")
        print("\nüîß Troubleshooting steps:")
        print("1. Check COM port is correct")
        print("2. Ensure relay module is powered")
        print("3. Verify USB cable connection")
        print("4. Check relay module supports 9600 baud Modbus RTU")
        print("5. Try different port with --port argument")
        
        if platform.system() == "Windows":
            print("\nüìã Available COM ports:")
            for port in list_ports.comports():
                print(f"   {port}")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        # Parse any additional args for test mode
        import argparse
        parser = argparse.ArgumentParser(description="Test Modbus Controller")
        parser.add_argument("--test", action="store_true", help="Run in test mode")
        parser.add_argument("--port", "-p", help="Specify COM port manually (e.g., COM3, COM4)")
        parser.add_argument("--list-ports", "-l", action="store_true", help="List all available COM ports and exit")
        
        # Parse remaining args (skip the first one which is "--test")
        args, _ = parser.parse_known_args(sys.argv[1:])
        
        if args.list_ports:
            print("Available COM ports:")
            for port in list_ports.comports():
                print(f"  {port}")
        else:
            test_modbus_controller(custom_port=args.port)
    else:
        main()

    @staticmethod
    def explain_baudrate_mechanics():
        """
        Gi·∫£i th√≠ch chi ti·∫øt v·ªÅ c∆° ch·∫ø baudrate v√† t·∫°i sao 9600 baud quan tr·ªçng cho relay
        """
        print("\n" + "="*80)
        print("üìö BAUDRATE & RELAY COMMUNICATION EXPLANATION")
        print("="*80)
        
        print("üîß SERIAL COMMUNICATION BASICS:")
        print("   ‚Ä¢ Baudrate = bits per second (bps)")
        print("   ‚Ä¢ Higher baudrate = faster data transmission")
        print("   ‚Ä¢ Both devices must use SAME baudrate to communicate")
        print("   ‚Ä¢ Mismatch = garbled data or no communication")
        
        print("\n‚ö° WHY 9600 BAUD FOR RELAY MODULES:")
        print("   1. üè≠ MODBUS RTU STANDARD:")
        print("      ‚Ä¢ Modbus RTU specification recommends 9600 baud")
        print("      ‚Ä¢ Most relay modules are designed for 9600 baud")
        print("      ‚Ä¢ Industrial standard for decades")
        
        print("\n   2. üîå HARDWARE COMPATIBILITY:")
        print("      ‚Ä¢ Relay controller chips (like STM32, Arduino) default to 9600")
        print("      ‚Ä¢ Less prone to timing errors at slower speed")
        print("      ‚Ä¢ Better noise immunity in industrial environments")
        
        print("\n   3. üíª CH340 USB-SERIAL CONVERTER:")
        print("      ‚Ä¢ Computer ‚Üî USB ‚Üî CH340 ‚Üî RS485/RS232 ‚Üî Relay")
        print("      ‚Ä¢ CH340 can accept multiple baudrates (9600, 115200, etc.)")
        print("      ‚Ä¢ BUT relay module only understands 9600 baud")
        
        print("\nüö® COMMON MISUNDERSTANDING:")
        print("   ‚ùå 'Connection successful at 115200 baud' ‚â† Working communication")
        print("   ‚úÖ CH340 accepts 115200 baud from computer")
        print("   ‚ùå But relay doesn't respond because it expects 9600 baud")
        print("   ‚û°Ô∏è  Result: Connection OK, but no relay control!")
        
        print("\nüß™ TESTING DIFFERENT BAUDRATES:")
        baudrates = [9600, 19200, 38400, 115200]
        print("   Baudrate ‚îÇ Connection ‚îÇ Relay Response ‚îÇ Recommendation")
        print("   ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        
        recommendations = [
            ("9600", "‚úÖ YES", "‚úÖ YES", "üèÜ BEST - Use this!"),
            ("19200", "‚úÖ YES", "‚ùå NO", "‚ö†Ô∏è  Connection only"),
            ("38400", "‚úÖ YES", "‚ùå NO", "‚ö†Ô∏è  Connection only"),
            ("115200", "‚úÖ YES", "‚ùå NO", "‚ö†Ô∏è  Connection only")
        ]
        
        for baud, conn, resp, rec in recommendations:
            print(f"   {baud:>8} ‚îÇ {conn:>10} ‚îÇ {resp:>14} ‚îÇ {rec}")
        
        print("\nüîç HOW AUTO-DETECTION WORKS:")
        print("   1. üì° Scan all available COM ports")
        print("   2. üîÑ Try each baudrate (9600, 19200, 38400, 115200)")
        print("   3. üì§ Send test commands to relay")
        print("   4. üì• Check for valid responses")
        print("   5. üìä Score each configuration based on:")
        print("      ‚Ä¢ Response quality (relay acknowledges commands)")
        print("      ‚Ä¢ Port type priority (COM5, USB Serial, etc.)")
        print("      ‚Ä¢ Baudrate preference (9600 = highest score)")
        print("   6. üéØ Select configuration with highest score")
        
        print("\nüí° TROUBLESHOOTING TIPS:")
        print("   ‚Ä¢ If auto-detection fails ‚Üí Check physical connections")
        print("   ‚Ä¢ If connection OK but no relay control ‚Üí Wrong baudrate")
        print("   ‚Ä¢ If 'access denied' error ‚Üí Close other serial programs")
        print("   ‚Ä¢ If no COM ports ‚Üí Check drivers (CH340/CP210x)")
        
        print("="*80)
